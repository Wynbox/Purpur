From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ibramsou <kasobanboui@gmail.com>
Date: Mon, 1 Jul 2024 14:53:12 +0200
Subject: [PATCH] Implement Biome Cache


diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeManager.java b/src/main/java/net/minecraft/world/level/biome/BiomeManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..34a001562b09757046ca435ab2cb56817404c6c1
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeManager.java
@@ -0,0 +1,135 @@
+package net.minecraft.world.level.biome;
+
+import com.google.common.hash.Hashing;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
+import net.minecraft.core.QuartPos;
+import net.minecraft.util.LinearCongruentialGenerator;
+import net.minecraft.util.Mth;
+import org.bukkit.Chunk;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+public class BiomeManager {
+    public static final int CHUNK_CENTER_QUART = QuartPos.fromBlock(8);
+    private static final int ZOOM_BITS = 2;
+    private static final int ZOOM = 4;
+    private static final int ZOOM_MASK = 3;
+    private final BiomeManager.NoiseBiomeSource noiseBiomeSource;
+    private final long biomeZoomSeed;
+    // Wynbox Start - Biome Cache
+    private final Long2ObjectOpenHashMap<Holder<Biome>> biomeCache = new Long2ObjectOpenHashMap<>();
+    public @Nullable Holder<Biome> getCachedBiome(long chunkKey) {
+        return this.biomeCache.get(chunkKey);
+    }
+
+    public @Nullable Holder<Biome> removeCachedBiome(long chunkKey) {
+        return this.biomeCache.remove(chunkKey);
+    }
+
+    public void setCachedBiome(long chunkKey, @Nonnull Holder<Biome> holder) {
+        this.biomeCache.put(chunkKey, holder);
+    }
+    // Wynbox End
+
+    public BiomeManager(BiomeManager.NoiseBiomeSource storage, long seed) {
+        this.noiseBiomeSource = storage;
+        this.biomeZoomSeed = seed;
+    }
+
+    public static long obfuscateSeed(long seed) {
+        return Hashing.sha256().hashLong(seed).asLong();
+    }
+
+    public BiomeManager withDifferentSource(BiomeManager.NoiseBiomeSource storage) {
+        return new BiomeManager(storage, this.biomeZoomSeed);
+    }
+
+    public Holder<Biome> getBiome(BlockPos pos) {
+        // Wynbox Start - Biome Cache
+        if (!this.biomeCache.isEmpty()) {
+            long key = Chunk.getChunkKey(pos.getX() >> 4, pos.getZ() >> 4);
+            Holder<Biome> holder = this.biomeCache.get(key);
+            if (holder != null) {
+                return holder;
+            }
+        }
+        // Wynbox End
+        int i = pos.getX() - 2;
+        int j = pos.getY() - 2;
+        int k = pos.getZ() - 2;
+        int l = i >> 2;
+        int m = j >> 2;
+        int n = k >> 2;
+        double d = (double)(i & 3) / 4.0;
+        double e = (double)(j & 3) / 4.0;
+        double f = (double)(k & 3) / 4.0;
+        int o = 0;
+        double g = Double.POSITIVE_INFINITY;
+
+        for (int p = 0; p < 8; p++) {
+            boolean bl = (p & 4) == 0;
+            boolean bl2 = (p & 2) == 0;
+            boolean bl3 = (p & 1) == 0;
+            int q = bl ? l : l + 1;
+            int r = bl2 ? m : m + 1;
+            int s = bl3 ? n : n + 1;
+            double h = bl ? d : d - 1.0;
+            double t = bl2 ? e : e - 1.0;
+            double u = bl3 ? f : f - 1.0;
+            double v = getFiddledDistance(this.biomeZoomSeed, q, r, s, h, t, u);
+            if (g > v) {
+                o = p;
+                g = v;
+            }
+        }
+
+        int w = (o & 4) == 0 ? l : l + 1;
+        int x = (o & 2) == 0 ? m : m + 1;
+        int y = (o & 1) == 0 ? n : n + 1;
+        return this.noiseBiomeSource.getNoiseBiome(w, x, y);
+    }
+
+    public Holder<Biome> getNoiseBiomeAtPosition(double x, double y, double z) {
+        int i = QuartPos.fromBlock(Mth.floor(x));
+        int j = QuartPos.fromBlock(Mth.floor(y));
+        int k = QuartPos.fromBlock(Mth.floor(z));
+        return this.getNoiseBiomeAtQuart(i, j, k);
+    }
+
+    public Holder<Biome> getNoiseBiomeAtPosition(BlockPos pos) {
+        int i = QuartPos.fromBlock(pos.getX());
+        int j = QuartPos.fromBlock(pos.getY());
+        int k = QuartPos.fromBlock(pos.getZ());
+        return this.getNoiseBiomeAtQuart(i, j, k);
+    }
+
+    public Holder<Biome> getNoiseBiomeAtQuart(int biomeX, int biomeY, int biomeZ) {
+        return this.noiseBiomeSource.getNoiseBiome(biomeX, biomeY, biomeZ);
+    }
+
+    private static double getFiddledDistance(long l, int i, int j, int k, double d, double e, double f) {
+        long m = LinearCongruentialGenerator.next(l, (long)i);
+        m = LinearCongruentialGenerator.next(m, (long)j);
+        m = LinearCongruentialGenerator.next(m, (long)k);
+        m = LinearCongruentialGenerator.next(m, (long)i);
+        m = LinearCongruentialGenerator.next(m, (long)j);
+        m = LinearCongruentialGenerator.next(m, (long)k);
+        double g = getFiddle(m);
+        m = LinearCongruentialGenerator.next(m, l);
+        double h = getFiddle(m);
+        m = LinearCongruentialGenerator.next(m, l);
+        double n = getFiddle(m);
+        return Mth.square(f + n) + Mth.square(e + h) + Mth.square(d + g);
+    }
+
+    private static double getFiddle(long l) {
+        double d = (double)Math.floorMod(l >> 24, 1024) / 1024.0;
+        return (d - 0.5) * 0.9;
+    }
+
+    public interface NoiseBiomeSource {
+        Holder<Biome> getNoiseBiome(int biomeX, int biomeY, int biomeZ);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 69c12d9049af908380c48c7f13d3d5c7220f8e39..377112cba898bebdd6c19b907e4643681abe37df 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -5,7 +5,6 @@ import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
-import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.io.File;
@@ -20,7 +19,6 @@ import java.util.Objects;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ExecutionException;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
@@ -124,7 +122,6 @@ import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.event.weather.LightningStrikeEvent;
-import org.bukkit.event.world.SpawnChangeEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.BlockPopulator;
@@ -147,6 +144,7 @@ import org.bukkit.util.StructureSearchResult;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import javax.annotation.Nonnull;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
@@ -2458,6 +2456,25 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
     // Purpur end
 
+    @Override
+    public @Nullable Biome getCachedBiome(Chunk chunk) {
+        Holder<net.minecraft.world.level.biome.Biome> holder = this.getHandle().getBiomeManager().getCachedBiome(chunk.getChunkKey());
+        if (holder == null) return null;
+        return CraftBiome.minecraftHolderToBukkit(holder);
+    }
+
+    @Override
+    public @Nullable Biome removeCachedBiome(Chunk chunk) {
+        Holder<net.minecraft.world.level.biome.Biome> holder = this.getHandle().getBiomeManager().removeCachedBiome(chunk.getChunkKey());
+        if (holder == null) return null;
+        return CraftBiome.minecraftHolderToBukkit(holder);
+    }
+
+    @Override
+    public void setCachedBiome(@Nonnull Chunk chunk, @Nonnull Biome biome) {
+        this.getHandle().getBiomeManager().setCachedBiome(chunk.getChunkKey(), CraftBiome.bukkitToMinecraftHolder(biome));
+    }
+
     @Override
     public Collection<GeneratedStructure> getStructures(int x, int z) {
         return this.getStructures(x, z, struct -> true);
